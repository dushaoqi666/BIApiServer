using BIApiServer.Interfaces;
using SqlSugar;
using BIApiServer.Models.Interfaces;
using Serilog;

namespace BIApiServer.Common
{
    public static class SqlSugarConfig
    {
        private static SqlSugarScope _db;
        private static readonly object _lock = new object();
        private static IConfiguration _configuration;

        public static void Initialize(IConfiguration configuration)
        {
            _configuration = configuration;
            var dbType = configuration["Database:Type"];
            var connectionStrings = configuration.GetSection($"Database:ConnectionStrings:{dbType}").Get<Dictionary<string, string>>();

            var connectionConfigs = connectionStrings.Select(conn => new ConnectionConfig()
            {
                ConfigId = conn.Key,
                ConnectionString = conn.Value,
                DbType = GetDbType(dbType),
                IsAutoCloseConnection = true,
                InitKeyType = InitKeyType.Attribute,
                AopEvents = new AopEvents
                {
                    OnLogExecuting = (sql, parameters) =>
                    {
                        Console.ForegroundColor = ConsoleColor.Green;
                        Console.WriteLine($@"
==================== SQL Log ====================
Time: {DateTime.Now:yyyy-MM-dd HH:mm:ss}
SQL: {sql}
Parameters: {string.Join(", ", parameters.Select(p => $"{p.ParameterName}={p.Value}"))}
===============================================");
                        Console.ResetColor();
                    },
                    OnError = (exp) =>
                    {
                        Console.ForegroundColor = ConsoleColor.Red;
                        Console.WriteLine($@"
==================== SQL Error ====================
Time: {DateTime.Now:yyyy-MM-dd HH:mm:ss}
Error: {exp.Message}
SQL: {exp.Sql}
================================================");
                        Console.ResetColor();
                    },
                    DataExecuting = (oldValue, entityInfo) =>
                    {
                        if (entityInfo.EntityValue is IAutoGenerated entity)
                        {
                            switch (entityInfo.OperationType)
                            {
                                case DataFilterType.InsertByObject:
                                    if (entityInfo.PropertyName == "CreateTime")
                                    {
                                        entityInfo.SetValue(DateTime.Now);
                                    }
                                    if (entityInfo.PropertyName == "UpdateTime")
                                    {
                                        entityInfo.SetValue(DateTime.Now);
                                    }
                                    if (entityInfo.PropertyName == "IsDeleted")
                                    {
                                        entityInfo.SetValue(false);
                                    }
                                    break;
                                case DataFilterType.UpdateByObject:
                                    if (entityInfo.PropertyName == "UpdateTime")
                                    {
                                        entityInfo.SetValue(DateTime.Now);
                                    }
                                    break;
                            }
                        }
                    }
                }
            }).ToList();

            _db = new SqlSugarScope(connectionConfigs);

            // 修改查询过滤器配置
            _db.QueryFilter.AddTableFilter<IDeletedFilter>(it => it.IsDeleted == false);

            // 全局设置参数
            _db.CurrentConnectionConfig.ConfigureExternalServices = new ConfigureExternalServices
            {
                EntityService = (property, column) =>
                {
                    if (property.PropertyType.IsEnum)
                    {
                        column.DataType = "int";
                    }
                }
            };
        }

        private static DbType GetDbType(string dbType)
        {
            return dbType?.ToUpper() switch
            {
                "POSTGRESQL" => DbType.PostgreSQL,
                "MYSQL" => DbType.MySql,
                _ => throw new ArgumentException($"Unsupported database type: {dbType}")
            };
        }

        public static SqlSugarScope GetInstance()
        {
            return _db ?? throw new InvalidOperationException("Database not initialized");
        }
    }
}